<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 第三方MQ工厂: ConnectionFactory -->
	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<!-- ActiveMQ Address -->
		<property name="brokerURL" value="tcp://localhost:61616"/>
		<property name="userName" value="admin"/>
		<property name="password" value="admin"/>
		<!-- 是否异步发送 -->
		<property name="useAsyncSend" value="true"/>
		<!-- 引用重发机制 -->
		<property name="redeliveryPolicy" ref="activeMQRedeliveryPolicy" />
		<!-- 消息传输监听器 处理网络及服务器异常 -->
		<!--<property name="transportListener">-->
		<!--<bean class="com.schooling.activemq.ActiveMQTransportListener"/>-->
		<!--</property>-->
	</bean>

	<!--
        ActiveMQ为我们提供了一个PooledConnectionFactory，通过往里面注入一个ActiveMQConnectionFactory
        可以用来将Connection、Session和MessageProducer池化，这样可以大大的减少我们的资源消耗,要依赖于 activemq-pool包
     -->
	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="connectionFactory" ref="targetConnectionFactory"/>
		<property name="maxConnections" value="10"/>
	</bean>

	<!-- 定义ReDelivery(重发机制)机制 ，重发时间间隔是100毫秒，最大重发次数是3次 -->
	<bean id="activeMQRedeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">
		<!--是否在每次尝试重新发送失败后,增长这个等待时间 -->
		<property name="useExponentialBackOff" value="true"/>
		<!--重发次数,默认为6次   这里设置为1次 -->
		<property name="maximumRedeliveries" value="2"/>
		<!--重发时间间隔,默认为1秒 -->
		<property name="initialRedeliveryDelay" value="1000"/>
		<!--第一次失败后重新发送之前等待500毫秒,第二次失败再等待500 * 2毫秒,这里的2就是value -->
		<property name="backOffMultiplier" value="2"/>
		<!--最大传送延迟，只在useExponentialBackOff为true时有效（V5.5），假设首次重连间隔为10ms，倍数为2，那么第二次重连时间间隔为 20ms，
        第三次重连时间间隔为40ms，当重连时间间隔大的最大重连时间间隔时，以后每次重连时间间隔都为最大重连时间间隔。 -->
		<property name="maximumRedeliveryDelay" value="1000"/>
	</bean>

	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="pooledConnectionFactory"/>
	</bean>

	<!--这个是目的地-->
	<bean id="msgQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="PayLog1"/>
	</bean>

	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<!-- 队列模板 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<property name="connectionFactory" ref="connectionFactory"/>
		<property name="defaultDestination" ref="msgQueue" />

		<property name="sessionTransacted" value="true"/>
		<property name="sessionAcknowledgeModeName" value="AUTO_ACKNOWLEDGE"/>
		<!--
		<property name="defaultDestinationName" value="PayLog1"/>
		-->
	</bean>

	<!--生产者 -->
	<bean id="payLogProducer" class="com.txp.activemq.producer.CommonProducer">
		<property name="jmsTemplate" ref="jmsTemplate"></property>
	</bean>

	<!-- 配置自定义监听：MessageListener -->
	<bean id="msgQueueMessageListener" class="com.txp.activemq.consumer.PayLogCustomer"/>

	<!-- 将连接工厂、目标对了、自定义监听注入jms模板 -->
	<bean id="sessionAwareListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory"/>
		<property name="destination" ref="msgQueue"/>
		<property name="messageListener" ref="msgQueueMessageListener"/>
		<!--应答模式是 INDIVIDUAL_ACKNOWLEDGE-->
		<property name="sessionAcknowledgeMode" value="4"/>
	</bean>

</beans>