<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
">


	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
	<bean id="activeMQConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616"></property>
	</bean>
	<!-- ActiveMQ为我们提供了一个PooledConnectionFactory，往里面注入一个ActiveMQConnectionFactory可以用来将Connection,
         Session和MessageProducer池化，这样可以大大的减少我们的资源消耗。  
         问题:使用poolConnectionFactory时候,用JMSTemplate同步循环接收消息,因为JMSTemplate会自动在接收消息后关闭连接,  
         所以循环到第二次的时候会报错,这个问题待解决  
         问题:使用poolConnectionFactory时候,用监听来接收消息,会有部分消息残留在队列里面,问题待解决  
         结论:还是先别用连接池了-->
	<bean id="poolConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"  >
		<property name="connectionFactory" ref="activeMQConnectionFactory" />
		<property name="maxConnections" value="10"/>
	</bean>
	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory 这里我使用的是singleConnectionFactory-->
	<bean id="singleConnectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
		<property name="targetConnectionFactory" ref="activeMQConnectionFactory"/>
	</bean>
	<bean id="cachingConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<property name="targetConnectionFactory" ref="activeMQConnectionFactory"/>
	</bean>


	<!-- 配置生产者 -->
	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="senderJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<property name="connectionFactory" ref="singleConnectionFactory"/>

		<!-- NON_PERSISTENT非持久化 1 ，PERSISTENT持久化 2 -->
		<property name="deliveryMode" value="2"/>

		<property name="sessionTransacted" value="true"/>
		<property name="sessionAcknowledgeModeName" value="AUTO_ACKNOWLEDGE"/>
	</bean>
	<!--这个是队列目的地，点对点的 -->
	<bean id="activeMQQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="PayLog1"/>
	</bean>
	<!--这个是主题目的地，一对多的 -->
	<bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="topic"/>
	</bean>

	<!-- 自定义消费者 -->
	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="receiverJmsTemplate" class="com.txp.activemq.util.SimpleJmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<property name="connectionFactory" ref="singleConnectionFactory"/>

		<!-- 如果是原生的amq创建的session,将session设置为true时候,ack会固定被设置为AUTO_ACKNOWLEDGE
             所以想要手动确认,那么session的事物必须设置为false,并且ack设置为CLIENT_ACKNOWLEDGE -->
		<property name="sessionTransacted" value="false"/>
		<property name="sessionAcknowledgeModeName" value="CLIENT_ACKNOWLEDGE"/>
		<property name="receiveTimeout" value="1000"/>
		<property name="autoAcknowledge" value="true"/>
	</bean>

	<!--消费者-->
	<bean id="mQ3Customer" class="com.txp.activemq.consumer.MQ3Customer" />

	<!-- 消息监听容器（Queue）支付状态处理-->
	<bean id="jmsContainerffPayLog"
		  class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="activeMQConnectionFactory" />
		<property name="destination" ref="activeMQQueue" />
		<property name="messageListener" ref="mQ3Customer" />
		<!--
		<property name="transactionManager" ref="jmsTransactionManager" />
		-->
		<property name="sessionAcknowledgeMode" value="4"></property>
		<property name="concurrency" value="50-100" />
	</bean>

</beans>